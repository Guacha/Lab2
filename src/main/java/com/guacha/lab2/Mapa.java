/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.guacha.lab2;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 * Interfaz principal que contiene todos las opciones del programa en su totalidad
 * @author Guacha
 */
public final class Mapa extends javax.swing.JFrame {
    
    private final Graphics2D g;
    private Graphe graphe;
    private Sommet sel;
    private final ImageIcon fondo;
    
    public Mapa() {
        initComponents();
        g = (Graphics2D) drawPanel.getGraphics();
        drawPanel.setSize(656, 781);
        Ficheur f = new Ficheur();
        graphe = new Graphe();
        fondo = new ImageIcon(getClass().getResource("/mapaLimpio.png"));
        g.drawImage(fondo.getImage(),0, 0, null);
        g.setStroke(new BasicStroke(3));
        dessinerGraphe();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingFrame = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        graphOptionPane = new javax.swing.JPanel();
        showPhotoCheck = new javax.swing.JCheckBox();
        showPesoCheck = new javax.swing.JCheckBox();
        fileSettingPane = new javax.swing.JPanel();
        CargarButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        newMapaButton = new javax.swing.JButton();
        defaultButton = new javax.swing.JButton();
        editSettingsPane = new javax.swing.JPanel();
        editArete = new javax.swing.JButton();
        adicionCheck = new javax.swing.JCheckBox();
        routeFrame = new javax.swing.JFrame();
        inicioComboBox = new javax.swing.JComboBox<>();
        destinoComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        kruskalRadio = new javax.swing.JRadioButton();
        primRadio = new javax.swing.JRadioButton();
        dijkstraRadio = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        recorridoButton = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        drawPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        enruter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        settingButton = new javax.swing.JButton();

        settingFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                settingFrameWindowClosed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 72)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Configuración");

        graphOptionPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Configuraciones Gráficas"));
        graphOptionPane.setToolTipText("");

        showPhotoCheck.setSelected(true);
        showPhotoCheck.setText("Mostrar Imagen frontal (Desactivar si se desea ver sólo la clase Graphics)");
        showPhotoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPhotoCheckActionPerformed(evt);
            }
        });

        showPesoCheck.setText("Mostrar tiempo entre Estaciones");
        showPesoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPesoCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphOptionPaneLayout = new javax.swing.GroupLayout(graphOptionPane);
        graphOptionPane.setLayout(graphOptionPaneLayout);
        graphOptionPaneLayout.setHorizontalGroup(
            graphOptionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphOptionPaneLayout.createSequentialGroup()
                .addGroup(graphOptionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showPhotoCheck)
                    .addComponent(showPesoCheck))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        graphOptionPaneLayout.setVerticalGroup(
            graphOptionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphOptionPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showPhotoCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPesoCheck))
        );

        fileSettingPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Configuración de Guardado/Cargado"));

        CargarButton.setText("Cargar Mapa personalizado (Sólo si se tiene un archivo GFM válido)");
        CargarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarButtonActionPerformed(evt);
            }
        });

        guardarButton.setText("Guardar Mapa actual");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        newMapaButton.setText("Crear Mapa nuevo (Habilita la adición de Aristas)");
        newMapaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMapaButtonActionPerformed(evt);
            }
        });

        defaultButton.setText("Cargar mapa por defecto");
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileSettingPaneLayout = new javax.swing.GroupLayout(fileSettingPane);
        fileSettingPane.setLayout(fileSettingPaneLayout);
        fileSettingPaneLayout.setHorizontalGroup(
            fileSettingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CargarButton, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
            .addComponent(guardarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(newMapaButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(defaultButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fileSettingPaneLayout.setVerticalGroup(
            fileSettingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileSettingPaneLayout.createSequentialGroup()
                .addComponent(CargarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guardarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newMapaButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defaultButton)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        editSettingsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Opciones de Edición"));

        editArete.setText("Editar Estación (Solo válido cuando se tiene una estación seleccionada)");
        editArete.setEnabled(false);
        editArete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAreteActionPerformed(evt);
            }
        });

        adicionCheck.setText("Habilitar adición de estaciones en el mapa");
        adicionCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editSettingsPaneLayout = new javax.swing.GroupLayout(editSettingsPane);
        editSettingsPane.setLayout(editSettingsPaneLayout);
        editSettingsPaneLayout.setHorizontalGroup(
            editSettingsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editArete, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editSettingsPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(adicionCheck)
                .addGap(139, 139, 139))
        );
        editSettingsPaneLayout.setVerticalGroup(
            editSettingsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editSettingsPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editArete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adicionCheck))
        );

        javax.swing.GroupLayout settingFrameLayout = new javax.swing.GroupLayout(settingFrame.getContentPane());
        settingFrame.getContentPane().setLayout(settingFrameLayout);
        settingFrameLayout.setHorizontalGroup(
            settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addGap(25, 25, 25))
            .addComponent(graphOptionPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(fileSettingPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editSettingsPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        settingFrameLayout.setVerticalGroup(
            settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(graphOptionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileSettingPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editSettingsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        routeFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Obtener una Ruta");

        jLabel3.setText("Elija el tipo de ruta que desea");

        buttonGroup1.add(kruskalRadio);
        kruskalRadio.setSelected(true);
        kruskalRadio.setText("Recorrer todo el metro");

        buttonGroup1.add(primRadio);
        primRadio.setText("Recorrer todo el metro (Desde un punto)");

        buttonGroup1.add(dijkstraRadio);
        dijkstraRadio.setText("Llegar de una estación a otra");

        jLabel5.setText("Punto de inicio");

        jLabel6.setText("Destino");

        recorridoButton.setText("Iniciar recorrido");
        recorridoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recorridoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout routeFrameLayout = new javax.swing.GroupLayout(routeFrame.getContentPane());
        routeFrame.getContentPane().setLayout(routeFrameLayout);
        routeFrameLayout.setHorizontalGroup(
            routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(routeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(routeFrameLayout.createSequentialGroup()
                        .addGroup(routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(kruskalRadio)
                            .addComponent(primRadio)
                            .addComponent(dijkstraRadio))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeFrameLayout.createSequentialGroup()
                        .addGroup(routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(routeFrameLayout.createSequentialGroup()
                                .addComponent(inicioComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(routeFrameLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(141, 141, 141)))
                        .addGroup(routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(destinoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(routeFrameLayout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(recorridoButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        routeFrameLayout.setVerticalGroup(
            routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, routeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kruskalRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(primRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dijkstraRadio)
                .addGap(10, 10, 10)
                .addGroup(routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(routeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inicioComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destinoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(recorridoButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(527, 996));
        setSize(new java.awt.Dimension(688, 1773));

        drawPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        drawPanel.setMaximumSize(new java.awt.Dimension(969, 800));
        drawPanel.setMinimumSize(new java.awt.Dimension(969, 800));
        drawPanel.setName(""); // NOI18N
        drawPanel.setPreferredSize(new java.awt.Dimension(969, 800));
        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawPanelMouseClicked(evt);
            }
        });
        drawPanel.setLayout(null);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mapaLimpio.png"))); // NOI18N
        jLabel4.setText("jLabel4");
        drawPanel.add(jLabel4);
        jLabel4.setBounds(0, 0, 970, 800);

        enruter.setText("Obtener Ruta");
        enruter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enruterActionPerformed(evt);
            }
        });

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        settingButton.setText("Configuración");
        settingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enruter, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(settingButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(enruter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    Operación que se corre cada vez que se hace clic sobre el panel
    encuentra si se hizo clic sobre algún nodo y hace la operación pertinente
    **/
    private void drawPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseClicked
        output.setText("");                                         //Limpiamos el output
        Point p = evt.getPoint();                                   //Tipo de dato Point que guarda la posición [X,Y] del punto donde ocurre el evento 
        boolean collide = false;                                    //Boleano que es true si se hizo clic sobre un vértice
        Sommet found = null;                                        //Vértice sobre el que hizo clic (Si existe)
        
        //Ciclo para encontrar un vértice que tenga una posición sobre la que se hizo clic
        for (Sommet sommet : graphe.getSommAdj().keySet()) {        
            if (Math.abs(sommet.pos.distance(p.x, p.y)) < 10) {     //Esta condición revisa todo el radio del nodo y revisa si el clic está en ese radio
                collide = 1 == 1;                                   //1==1: Verdadero
                found = sommet;         
            }
        }
        if (!collide) {                                             //Si no se hizo clic sobre un vertice
            if (adicionCheck.isSelected()) {
                sel = null;
                this.setEnabled(false);
                Connections c = new Connections(graphe, this, evt.getPoint()); //Abre la ventana de cración/Edición de vértices con constructor de creación
                c.setVisible(true);
            } else {
                dessinerGraphe();
            }
        } else {
            sel = found;
            showInfo(found);
        }
        setupButtons();
    }//GEN-LAST:event_drawPanelMouseClicked
    
   
   
   
    /**
     * Función que se llama al presionar el botón para mostrar las rutas <p>
     * Genera un MST y lo dibuja
     */
    private void enruterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enruterActionPerformed
        DefaultComboBoxModel<String> model;
        model = new DefaultComboBoxModel<>();
        for (Sommet sommet : graphe.getSommAdj().keySet()) {
            model.addElement(sommet.nombre);
        }
        inicioComboBox.setModel(model);
        destinoComboBox.setModel(model);
        routeFrame.setVisible(true);
    }//GEN-LAST:event_enruterActionPerformed
    
    private void settingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingButtonActionPerformed
        settingFrame.setLocationRelativeTo(null);
        settingFrame.pack();
        settingFrame.setVisible(true);
    }//GEN-LAST:event_settingButtonActionPerformed

//GEN-FIRST:event_ouvrirActionPerformed
 
//GEN-LAST:event_ouvrirActionPerformed

//GEN-FIRST:event_sauvegarderActionPerformed
 
//GEN-LAST:event_sauvegarderActionPerformed

    private void showPhotoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPhotoCheckActionPerformed
        dessinerGraphe();
    }//GEN-LAST:event_showPhotoCheckActionPerformed

    private void showPesoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPesoCheckActionPerformed
        dessinerGraphe();
    }//GEN-LAST:event_showPesoCheckActionPerformed

    private void adicionCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionCheckActionPerformed

    }//GEN-LAST:event_adicionCheckActionPerformed

    private void editAreteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAreteActionPerformed
        Connections c = new Connections(graphe, this, sel);
        this.setEnabled(false);
        c.setVisible(true);
    }//GEN-LAST:event_editAreteActionPerformed

    /**
     * Función del botón cargar, abre un archivo .GFM y lo carga al programa
     */
    private void CargarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarButtonActionPerformed
       Ficheur f = new Ficheur();
       this.graphe = f.ouvrir();
       dessinerGraphe();
       settingFrame.setVisible(false);
       this.setEnabled(true);
    }//GEN-LAST:event_CargarButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        Ficheur f = new Ficheur();
        f.sauvegarder(graphe);
        dessinerGraphe();
        settingFrame.setVisible(false);
        this.setEnabled(true);
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void newMapaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMapaButtonActionPerformed
        int sel = JOptionPane.showConfirmDialog(null, "Está seguro que desea eliminar el mapa y empezar de 0?", "Eliminar mapa", 0, 2);
        if (sel == 0) {
            this.graphe = new Graphe();
            dessinerGraphe();
        }
        
    }//GEN-LAST:event_newMapaButtonActionPerformed

    private void settingFrameWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_settingFrameWindowClosed

    }//GEN-LAST:event_settingFrameWindowClosed

    private void recorridoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recorridoButtonActionPerformed
        if (kruskalRadio.isSelected()) {
            dessinerGraphe(graphe.kruskalMST());
        } else if (primRadio.isSelected()) {
            Sommet start = graphe.getSommet((String)inicioComboBox.getSelectedItem());
            dessinerGraphe(graphe.primMST(start));
        } else {
            Sommet start = graphe.getSommet((String)inicioComboBox.getSelectedItem());
            Sommet dest = graphe.getSommet((String)destinoComboBox.getSelectedItem());
            dessinerGraphe(graphe.Dijkstra(start, dest));
        }
        routeFrame.setVisible(false);
    }//GEN-LAST:event_recorridoButtonActionPerformed

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        this.graphe = new Ficheur().ouvrir(getClass().getResource("/STMFINAL.gfm").getPath());
        dessinerGraphe();
        settingFrame.setVisible(false);
    }//GEN-LAST:event_defaultButtonActionPerformed
   
    /**
     * Función que se encarga de dibujar el grafo en pantalla sobre el panel de dibujo
     */
    public void dessinerGraphe() {
        clearPane(); //Limpiar el panel
        if (showPhotoCheck.isSelected()) {
            drawBG();
        }
        graphe.getSommAdj().entrySet().forEach((entry) -> { //Se busca en el mapa cada combinación de llave-dato (Expresión lambda)
            int x1, y1, x2, y2;                             //Posición inicial-final de la linea y de cada vertice
            x1 = entry.getKey().pos.x;                      //obtener [X,Y] del nodo por graficar
            y1 = entry.getKey().pos.y;
            for (Map.Entry<Sommet, Integer> rel : entry.getValue().entrySet()) {//Se busca en las relaciones de ese nodo
               Sommet sommet = rel.getKey();
                x2 = sommet.pos.x;                                              //Se obtiene las [X,Y] del nodo relacionado y se dibuja la linea y el nodo al final de la linea
                y2 = sommet.pos.y;
                int xMed = (x1+x2)/2;                                           //Se obtiene el punto medio [X,Y] en la arista a dibujar para poner el peso de la misma
                int yMed = (y1+y2)/2;
                if (rel.getKey().ligne ==  Ligne.LIGNE_MULTI) {
                    g.setColor(getColor(entry.getKey()));
                } else if (entry.getKey().ligne == Ligne.LIGNE_MULTI) {
                    g.setColor(getColor(rel.getKey()));
                } else {
                    g.setColor(getColor(rel.getKey()));
                }
                g.drawLine(x1, y1, x2, y2);
                if (showPesoCheck.isSelected()) {
                    g.setColor(Color.BLACK);
                    g.fillRect(xMed-7, yMed-7, 14, 14);
                    g.setColor(Color.white);
                    g.drawString(String.valueOf(rel.getValue()), xMed-5, yMed+4);
                }
            }
            g.setColor(getColor(entry.getKey()));
            g.fillOval(x1-5, y1-5, 10, 10);
        });
        
    }
    /**
     * Función que Función que se encarga de dibujar el grafo en pantalla sobre el panel de dibujo <p>
     * Esta recibe el parámetro V, que es un nodo "marcado", y a a la hora de dibujarlo, tendrá distinto color
     * @param v El nodo a marcar en el grafo
     */
    public void dessinerGraphe(Sommet v) {
        //Todo es exactamente igual a la función anterior, solo que en la 
        //selección del color, si es el nodo marcado, será verde.
        clearPane();
        if (showPhotoCheck.isSelected()) {
            drawBG();
        }
        graphe.getSommAdj().entrySet().forEach((entry) -> {
            int x1, y1, x2, y2, xMed, yMed;
            x1 = entry.getKey().pos.x;
            y1 = entry.getKey().pos.y;
            
            for (Map.Entry<Sommet, Integer> rel : entry.getValue().entrySet()) {
                Sommet sommet = rel.getKey();
                x2 = sommet.pos.x;
                y2 = sommet.pos.y;
                xMed = (x1+x2)/2;
                yMed = (y1 + y2)/2;
                if (rel.getKey().ligne ==  Ligne.LIGNE_MULTI) {
                    g.setColor(getColor(entry.getKey()));
                } else if (entry.getKey().ligne == Ligne.LIGNE_MULTI) {
                    g.setColor(getColor(rel.getKey()));
                } else {
                    g.setColor(getColor(rel.getKey()));
                }
                g.drawLine(x1, y1, x2, y2);
                if (showPesoCheck.isSelected()) {
                    g.setColor(Color.BLACK);
                    g.fillRect(xMed-7, yMed-7, 14, 14);
                    g.setColor(Color.white);
                    g.drawString(String.valueOf(rel.getValue()), xMed-5, yMed+4);
                }
            }
            if (entry.getKey().equals(v)) {
                g.setColor(Color.red);
            } else {
                g.setColor(getColor(entry.getKey()));
            }
            g.fillOval(x1-5, y1-5, 10, 10);
        });
    }
    
    public void dessinerGraphe(Graphe graph) {
        if (showPhotoCheck.isSelected()) {
            drawBG();
        }
        dessinerGraphe();
        graph.getSommAdj().entrySet().forEach((entry) -> { //Se busca en el mapa cada combinación de llave-dato (Expresión lambda)
            int x1, y1, x2, y2;                             //Posición inicial-final de la linea y de cada vertice
            x1 = entry.getKey().pos.x;                      //obtener [X,Y] del nodo por graficar
            y1 = entry.getKey().pos.y;
            for (Map.Entry<Sommet, Integer> rel : entry.getValue().entrySet()) {//Se busca en las relaciones de ese nodo
               Sommet sommet = rel.getKey();
                x2 = sommet.pos.x;                                              //Se obtiene las [X,Y] del nodo relacionado y se dibuja la linea y el nodo al final de la linea
                y2 = sommet.pos.y;
                int xMed = (x1+x2)/2;                                           //Se obtiene el punto medio [X,Y] en la arista a dibujar para poner el peso de la misma
                int yMed = (y1+y2)/2;
                g.setColor(Color.RED);
                g.drawLine(x1, y1, x2, y2);
                g.drawLine(x1+1, y1, x2+1, y2);
                g.drawLine(x1-1, y1, x2-1, y2);
                if (showPesoCheck.isSelected()) {
                    g.setColor(Color.BLACK);
                    g.fillRect(xMed-7, yMed-7, 14, 14);
                    g.setColor(Color.white);
                    g.drawString(String.valueOf(rel.getValue()), xMed-6, yMed+5);
                }
                
            }
            g.setColor(Color.getHSBColor((float)0.7, (float)1, (float)1));
            g.fillOval(x1-5, y1-5, 10, 10);
        });
        
    }
    
    /**
     * Función que limpia el panel completo.<p>
     * En realidad, crea un cuadrado de 1000x1000 empezando en [0,0] en blanco
     */
    private void clearPane() {
        g.clearRect(0, 0, 1000, 1000);
    }
    
    private void drawBG() {
        g.drawImage(fondo.getImage(),0, 0, null);
    }
    
    /**
     * Retorna un color dependiendo del tipo de estación que tenga un vértice
     * @param s El vértice para el que se quiere hallar el color
     * @return el color con el que dse va a dibujar el vértice
     */
    private Color getColor(Sommet s) {
        switch(s.ligne) {
            case LIGNE_VERTE:
                return Color.GREEN;
            case LIGNE_ORANGE:
                return Color.orange;
            case LIGNE_BLEUE:
                return Color.blue;
            case LIGNE_JAUNE:
                return Color.yellow;
            case LIGNE_MULTI:
                return Color.MAGENTA;
            default:
                return Color.green;
        }
    }
    /**
     * Esta función se encarga de encender o apagar los botones cuando sea necesario
     */
    private void setupButtons() {
        editArete.setEnabled(sel != null);
    }
    
    /**
     * Esta función escribe en el Area de texto la información que se requiere del nodo seleccionado <p>
     * La información es proporcionada por la clase Graphe
     * @param trouve El nodo cuya enformación se va a mostrar
     */
    public void showInfo(Sommet trouve) {
        output.setText("Estación Seleccionada: \n");
        output.append("Nombre: " + trouve.nombre + "\n");
        output.append(graphe.soutGraphe(trouve));
    }

    /**
     * Getter para el TextArea llamado "output" que existe en la ventana principal
     * @return JTextArea "output" de la ventana Mapa
     */
    public JTextArea getOutput() {
        return output;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarButton;
    private javax.swing.JCheckBox adicionCheck;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton defaultButton;
    private javax.swing.JComboBox<String> destinoComboBox;
    private javax.swing.JRadioButton dijkstraRadio;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JButton editArete;
    private javax.swing.JPanel editSettingsPane;
    private javax.swing.JButton enruter;
    private javax.swing.JPanel fileSettingPane;
    private javax.swing.JPanel graphOptionPane;
    private javax.swing.JButton guardarButton;
    private javax.swing.JComboBox<String> inicioComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton kruskalRadio;
    private javax.swing.JButton newMapaButton;
    private javax.swing.JTextArea output;
    private javax.swing.JRadioButton primRadio;
    private javax.swing.JButton recorridoButton;
    private javax.swing.JFrame routeFrame;
    private javax.swing.JButton settingButton;
    private javax.swing.JFrame settingFrame;
    private javax.swing.JCheckBox showPesoCheck;
    private javax.swing.JCheckBox showPhotoCheck;
    // End of variables declaration//GEN-END:variables
    
    
    
}