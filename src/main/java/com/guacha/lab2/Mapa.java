/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.guacha.lab2;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.JTextArea;

/**
 * Interfaz principal que contiene todos las opciones del programa en su totalidad
 * @author Guacha
 */
public final class Mapa extends javax.swing.JFrame {
    
    private Graphics g;
    private Graphe graphe;
    private Sommet sel;
    private BufferedImage bg;
    
    public Mapa() {
        initComponents();
        g = drawPanel.getGraphics();
        drawPanel.setSize(656, 781);
        Ficheur f = new Ficheur();
        graphe = new Graphe();
        try {
            bg = ImageIO.read(getClass().getResource("/metro.jpg"));
        } catch (IOException ex) {
            bg = null;
        }
        drawBG();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingFrame = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        showPhotoCheck = new javax.swing.JCheckBox();
        sauvegarder = new javax.swing.JButton();
        ouvrir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        editArete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        enruter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        drawPanel = new javax.swing.JPanel();
        fondoLabel = new javax.swing.JLabel();
        settingButton = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 72)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Configuración");

        showPhotoCheck.setSelected(true);
        showPhotoCheck.setText("Mostrar Imagen frontal (Desactivar solo si se desea ver la clase Graphics)");
        showPhotoCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPhotoCheckActionPerformed(evt);
            }
        });

        sauvegarder.setText("Guardar mapa");
        sauvegarder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauvegarderActionPerformed(evt);
            }
        });

        ouvrir.setText("Cargar mapa");
        ouvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Opciones de cargado de mapa (Usar sólo si se tiene un archivo .gfm válido para cargar)");

        editArete.setText("Editar Estación");
        editArete.setEnabled(false);
        editArete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAreteActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Opciones de la estación seleccionada (Solo válido si se tiene una estación seleccionada actualmente)");

        javax.swing.GroupLayout settingFrameLayout = new javax.swing.GroupLayout(settingFrame.getContentPane());
        settingFrame.getContentPane().setLayout(settingFrameLayout);
        settingFrameLayout.setHorizontalGroup(
            settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingFrameLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(sauvegarder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ouvrir)
                .addGap(177, 177, 177))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingFrameLayout.createSequentialGroup()
                        .addComponent(showPhotoCheck)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingFrameLayout.createSequentialGroup()
                .addGroup(settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1))
                .addContainerGap())
            .addGroup(settingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editArete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        settingFrameLayout.setVerticalGroup(
            settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(showPhotoCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sauvegarder)
                    .addComponent(ouvrir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editArete)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(527, 996));
        setSize(new java.awt.Dimension(688, 1773));

        enruter.setText("Obtener Ruta");
        enruter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enruterActionPerformed(evt);
            }
        });

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        drawPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        drawPanel.setMaximumSize(new java.awt.Dimension(656, 781));
        drawPanel.setMinimumSize(new java.awt.Dimension(656, 781));
        drawPanel.setPreferredSize(new java.awt.Dimension(656, 781));
        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawPanelMouseClicked(evt);
            }
        });
        drawPanel.setLayout(null);

        fondoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/metro.jpg"))); // NOI18N
        drawPanel.add(fondoLabel);
        fondoLabel.setBounds(0, -10, 660, 820);

        settingButton.setText("Configuración");
        settingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enruter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(enruter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    Operación que se corre cada vez que se hace clic sobre el panel
    encuentra si se hizo clic sobre algún nodo y hace la operación pertinente
    **/
    private void drawPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseClicked
        output.setText("");                                         //Limpiamos el output
        Point p = evt.getPoint();                                   //Tipo de dato Point que guarda la posición [X,Y] del punto donde ocurre el evento 
        boolean collide = false;                                    //Boleano que es true si se hizo clic sobre un vértice
        Sommet found = null;                                        //Vértice sobre el que hizo clic (Si existe)
        
        //Ciclo para encontrar un vértice que tenga una posición sobre la que se hizo clic
        for (Sommet sommet : graphe.getSommAdj().keySet()) {        
            if (Math.abs(sommet.pos.distance(p.x, p.y)) < 10) {     //Esta condición revisa todo el radio del nodo y revisa si el clic está en ese radio
                collide = 1 == 1;                                   //1==1: Verdadero
                found = sommet;         
            }
        }
        if (!collide) {                                             //Si no se hizo clic sobre un vertice
            sel = null;
            Connections c = new Connections(graphe, this, evt.getPoint()); //Abre la ventana de cración/Edición de vértices con constructor de creación
            c.setVisible(true);
            drawBG();
            dessinerGraphe();
        } else {
            drawBG();
            dessinerGraphe(found);
            sel = found;
            showInfo(found);
        }
        setupButtons();
    }//GEN-LAST:event_drawPanelMouseClicked
    
    //Boton guardar
    private void sauvegarderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauvegarderActionPerformed
        Ficheur f = new Ficheur();
        f.sauvegarder(graphe); 
    }//GEN-LAST:event_sauvegarderActionPerformed
    
    //Boton Abrir
    private void ouvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirActionPerformed
        Ficheur f = new Ficheur();
        this.graphe = f.ouvrir(); //Carga el grafo de un archivo y lo dibuja
        dessinerGraphe();
    }//GEN-LAST:event_ouvrirActionPerformed
    
    /**
     * Abre la ventana de conexiones con el constructor para Editar vértices 
     */
    private void editAreteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAreteActionPerformed
        if (sel != null) {
            new Connections(graphe, this, sel).setVisible(true);
        }
    }//GEN-LAST:event_editAreteActionPerformed
    
    /**
     * Función que se llama al presionar el botón para mostrar las rutas <p>
     * Genera un MST y lo dibuja
     */
    private void enruterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enruterActionPerformed
        dessinerGraphe(graphe.kruskalMST());
    }//GEN-LAST:event_enruterActionPerformed

    private void settingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingButtonActionPerformed
        settingFrame.setLocationRelativeTo(null);
        settingFrame.pack();
        settingFrame.setVisible(true);
    }//GEN-LAST:event_settingButtonActionPerformed

    private void showPhotoCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPhotoCheckActionPerformed
        if (showPhotoCheck.isSelected()) {
            fondoLabel.setVisible(true);
        } else {
            fondoLabel.setVisible(false);
        }
    }//GEN-LAST:event_showPhotoCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mapa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            Mapa m = new Mapa();
            m.setVisible(true);
        });
    }

   
    /**
     * Función que se encarga de dibujar el grafo en pantalla sobre el panel de dibujo
     */
    public void dessinerGraphe() {
        clearPane(); //Limpiar el panel
        if (showPhotoCheck.isSelected()) {
            drawBG();
        }
        graphe.getSommAdj().entrySet().forEach((entry) -> { //Se busca en el mapa cada combinación de llave-dato (Expresión lambda)
            int x1, y1, x2, y2;                             //Posición inicial-final de la linea y de cada vertice
            x1 = entry.getKey().pos.x;                      //obtener [X,Y] del nodo por graficar
            y1 = entry.getKey().pos.y;
            for (Map.Entry<Sommet, Integer> rel : entry.getValue().entrySet()) {//Se busca en las relaciones de ese nodo
               Sommet sommet = rel.getKey();
                x2 = sommet.pos.x;                                              //Se obtiene las [X,Y] del nodo relacionado y se dibuja la linea y el nodo al final de la linea
                y2 = sommet.pos.y;
                int xMed = (x1+x2)/2;                                           //Se obtiene el punto medio [X,Y] en la arista a dibujar para poner el peso de la misma
                int yMed = (y1+y2)/2;
                g.setColor(Color.black);
                g.drawLine(x1, y1, x2, y2);
                g.setColor(Color.BLACK);
                g.fillRect(xMed-7, yMed-7, 14, 14);
                g.setColor(Color.white);
                g.drawString(String.valueOf(rel.getValue()), xMed-5, yMed+4);
            }
            g.setColor(getColor(entry.getKey()));
            g.fillOval(x1-5, y1-5, 10, 10);
        });
        
    }
    /**
     * Función que Función que se encarga de dibujar el grafo en pantalla sobre el panel de dibujo <p>
     * Esta recibe el parámetro V, que es un nodo "marcado", y a a la hora de dibujarlo, tendrá distinto color
     * @param v El nodo a marcar en el grafo
     */
    public void dessinerGraphe(Sommet v) {
        //Todo es exactamente igual a la función anterior, solo que en la 
        //selección del color, si es el nodo marcado, será verde.
        clearPane();
        if (showPhotoCheck.isSelected()) {
            drawBG();
        }
        graphe.getSommAdj().entrySet().forEach((entry) -> {
            int x1, y1, x2, y2, xMed, yMed;
            x1 = entry.getKey().pos.x;
            y1 = entry.getKey().pos.y;
            
            for (Map.Entry<Sommet, Integer> rel : entry.getValue().entrySet()) {
                Sommet sommet = rel.getKey();
                x2 = sommet.pos.x;
                y2 = sommet.pos.y;
                xMed = (x1+x2)/2;
                yMed = (y1 + y2)/2;
                g.setColor(Color.black);
                g.drawLine(x1, y1, x2, y2);
                g.setColor(Color.BLACK);
                g.fillRect(xMed-7, yMed-7, 14, 14);
                g.setColor(Color.white);
                g.drawString(String.valueOf(rel.getValue()), xMed-5, yMed+4);
            }
            if (entry.getKey().equals(v)) {
                g.setColor(Color.red);
            } else {
                g.setColor(getColor(entry.getKey()));
            }
            g.fillOval(x1-5, y1-5, 10, 10);
        });
    }
    
    public void dessinerGraphe(Graphe graph) {
        dessinerGraphe();
        if (showPhotoCheck.isSelected()) {
            drawBG();
        }
        graph.getSommAdj().entrySet().forEach((entry) -> { //Se busca en el mapa cada combinación de llave-dato (Expresión lambda)
            int x1, y1, x2, y2;                             //Posición inicial-final de la linea y de cada vertice
            x1 = entry.getKey().pos.x;                      //obtener [X,Y] del nodo por graficar
            y1 = entry.getKey().pos.y;
            for (Map.Entry<Sommet, Integer> rel : entry.getValue().entrySet()) {//Se busca en las relaciones de ese nodo
               Sommet sommet = rel.getKey();
                x2 = sommet.pos.x;                                              //Se obtiene las [X,Y] del nodo relacionado y se dibuja la linea y el nodo al final de la linea
                y2 = sommet.pos.y;
                int xMed = (x1+x2)/2;                                           //Se obtiene el punto medio [X,Y] en la arista a dibujar para poner el peso de la misma
                int yMed = (y1+y2)/2;
                g.setColor(Color.RED);
                g.drawLine(x1, y1, x2, y2);
                g.drawLine(x1+1, y1, x2+1, y2);
                g.drawLine(x1-1, y1, x2-1, y2);
                g.setColor(Color.BLACK);
                g.fillRect(xMed-7, yMed-7, 14, 14);
                g.setColor(Color.white);
                g.drawString(String.valueOf(rel.getValue()), xMed-6, yMed+5);
            }
            g.setColor(Color.getHSBColor((float)0.7, (float)1, (float)1));
            g.fillOval(x1-5, y1-5, 10, 10);
        });
        
    }
    
    /**
     * Función que limpia el panel completo.<p>
     * En realidad, crea un cuadrado de 1000x1000 empezando en [0,0] en blanco
     */
    private void clearPane() {
        g.clearRect(0, 0, 1000, 1000);
    }
    
    private void drawBG() {
        g.drawImage(bg, 0, 0, null);
    }
    
    /**
     * Retorna un color dependiendo del tipo de estación que tenga un vértice
     * @param s El vértice para el que se quiere hallar el color
     * @return el color con el que dse va a dibujar el vértice
     */
    private Color getColor(Sommet s) {
        switch(s.ligne) {
            case LIGNE_VERTE:
                return Color.GREEN;
            case LIGNE_ORANGE:
                return Color.orange;
            case LIGNE_BLEUE:
                return Color.blue;
            case LIGNE_JAUNE:
                return Color.yellow;
            case LIGNE_MULTI:
                return Color.MAGENTA;
            default:
                return Color.green;
        }
    }
    /**
     * Esta función se encarga de encender o apagar los botones cuando sea necesario
     */
    private void setupButtons() {
        editArete.setEnabled(sel != null);
    }
    
    /**
     * Esta función escribe en el Area de texto la información que se requiere del nodo seleccionado <p>
     * La información es proporcionada por la clase Graphe
     * @param trouve El nodo cuya enformación se va a mostrar
     */
    public void showInfo(Sommet trouve) {
        output.setText("Estación Seleccionada: \n");
        output.append("Nombre: " + trouve.nombre + "\n");
        output.append(graphe.soutGraphe(trouve));
    }

    /**
     * Getter para el TextArea llamado "output" que existe en la ventana principal
     * @return JTextArea "output" de la ventana Mapa
     */
    public JTextArea getOutput() {
        return output;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel drawPanel;
    private javax.swing.JButton editArete;
    private javax.swing.JButton enruter;
    private javax.swing.JLabel fondoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea output;
    private javax.swing.JButton ouvrir;
    private javax.swing.JButton sauvegarder;
    private javax.swing.JButton settingButton;
    private javax.swing.JFrame settingFrame;
    private javax.swing.JCheckBox showPhotoCheck;
    // End of variables declaration//GEN-END:variables
    
    
    
}